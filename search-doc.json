[{"title":"second-post","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/blog/2023/07/27/second-post","content":"Welcome to this blog. This blog is created with Docusaurus 2. 这是啥","keywords":""},{"title":"first-post","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/blog/2023/07/26/first-post","content":"Welcome to this blog. This blog is created with Docusaurus 2.","keywords":""},{"title":"Congratulations!","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/docs/tutorial-basics/congratulations","content":"","keywords":""},{"title":"What's next?​","type":1,"pageTitle":"Congratulations!","url":"/blog-docusaurus-preview/docs/tutorial-basics/congratulations#whats-next","content":"Read the official documentationModify your site configuration with docusaurus.config.jsAdd navbar and footer items with themeConfigAdd a custom Design and LayoutAdd a search barFind inspirations in the Docusaurus showcaseGet involved in the Docusaurus Community "},{"title":"third-post","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/blog/2023/07/28/third-post","content":"asdfasdfasdf 提示 Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":""},{"title":"Tutorial Intro","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/docs/intro","content":"","keywords":""},{"title":"Getting Started​","type":1,"pageTitle":"Tutorial Intro","url":"/blog-docusaurus-preview/docs/intro#getting-started","content":"Get started by creating a new site. Or try Docusaurus immediately with docusaurus.new. "},{"title":"What you'll need​","type":1,"pageTitle":"Tutorial Intro","url":"/blog-docusaurus-preview/docs/intro#what-youll-need","content":"Node.js version 16.14 or above: When installing Node.js, you are recommended to check all checkboxes related to dependencies. "},{"title":"Generate a new site​","type":1,"pageTitle":"Tutorial Intro","url":"/blog-docusaurus-preview/docs/intro#generate-a-new-site","content":"Generate a new Docusaurus site using the classic template. The classic template will automatically be added to your project after you run the command: npm init docusaurus@latest my-website classic  You can type this command into Command Prompt, Powershell, Terminal, or any other integrated terminal of your code editor. The command also installs all necessary dependencies you need to run Docusaurus. "},{"title":"Start your site​","type":1,"pageTitle":"Tutorial Intro","url":"/blog-docusaurus-preview/docs/intro#start-your-site","content":"Run the development server: cd my-website npm run start  The cd command changes the directory you're working with. In order to work with your newly created Docusaurus site, you'll need to navigate the terminal there. The npm run start command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/. Open docs/intro.md (this page) and edit some lines: the site reloads automatically and displays your changes. "},{"title":"Deploy your site","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/docs/tutorial-basics/deploy-your-site","content":"","keywords":""},{"title":"Build your site​","type":1,"pageTitle":"Deploy your site","url":"/blog-docusaurus-preview/docs/tutorial-basics/deploy-your-site#build-your-site","content":"Build your site for production: npm run build  The static files are generated in the build folder. "},{"title":"Deploy your site​","type":1,"pageTitle":"Deploy your site","url":"/blog-docusaurus-preview/docs/tutorial-basics/deploy-your-site#deploy-your-site-1","content":"Test your production build locally: npm run serve  The build folder is now served at http://localhost:3000/. You can now deploy the build folder almost anywhere easily, for free or very small cost (read the Deployment Guide). "},{"title":"Create a Blog Post","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/docs/tutorial-basics/create-a-blog-post","content":"","keywords":""},{"title":"Create your first Post​","type":1,"pageTitle":"Create a Blog Post","url":"/blog-docusaurus-preview/docs/tutorial-basics/create-a-blog-post#create-your-first-post","content":"Create a file at blog/2021-02-28-greetings.md: blog/2021-02-28-greetings.md --- slug: greetings title: Greetings! authors: - name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png - name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png tags: [greetings] --- Congratulations, you have made your first post! Feel free to play around and edit this post as much you like.  A new blog post is now available at http://localhost:3000/blog/greetings. "},{"title":"Create a Page","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/docs/tutorial-basics/create-a-page","content":"","keywords":""},{"title":"Create your first React Page​","type":1,"pageTitle":"Create a Page","url":"/blog-docusaurus-preview/docs/tutorial-basics/create-a-page#create-your-first-react-page","content":"Create a file at src/pages/my-react-page.js: src/pages/my-react-page.js import React from 'react'; import Layout from '@theme/Layout'; export default function MyReactPage() { return ( &lt;Layout&gt; &lt;h1&gt;My React page&lt;/h1&gt; &lt;p&gt;This is a React page&lt;/p&gt; &lt;/Layout&gt; ); }  A new page is now available at http://localhost:3000/my-react-page. "},{"title":"Create your first Markdown Page​","type":1,"pageTitle":"Create a Page","url":"/blog-docusaurus-preview/docs/tutorial-basics/create-a-page#create-your-first-markdown-page","content":"Create a file at src/pages/my-markdown-page.md: src/pages/my-markdown-page.md # My Markdown page This is a Markdown page  A new page is now available at http://localhost:3000/my-markdown-page. "},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/docs/tutorial-extras/manage-docs-versions","content":"","keywords":""},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/blog-docusaurus-preview/docs/tutorial-extras/manage-docs-versions#create-a-docs-version","content":"Release a version 1.0 of your project: npm run docusaurus docs:version 1.0  The docs folder is copied into versioned_docs/version-1.0 and versions.json is created. Your docs now have 2 versions: 1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs "},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/blog-docusaurus-preview/docs/tutorial-extras/manage-docs-versions#add-a-version-dropdown","content":"To navigate seamlessly across versions, add a version dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', }, ], }, }, };  The docs version dropdown appears in your navbar:  "},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/blog-docusaurus-preview/docs/tutorial-extras/manage-docs-versions#update-an-existing-version","content":"It is possible to edit versioned docs in their respective folder: versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello "},{"title":"Create a Document","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/docs/tutorial-basics/create-a-document","content":"","keywords":""},{"title":"Create your first Doc​","type":1,"pageTitle":"Create a Document","url":"/blog-docusaurus-preview/docs/tutorial-basics/create-a-document#create-your-first-doc","content":"Create a Markdown file at docs/hello.md: docs/hello.md # Hello This is my **first Docusaurus document**!  A new document is now available at http://localhost:3000/docs/hello. "},{"title":"Configure the Sidebar​","type":1,"pageTitle":"Create a Document","url":"/blog-docusaurus-preview/docs/tutorial-basics/create-a-document#configure-the-sidebar","content":"Docusaurus automatically creates a sidebar from the docs folder. Add metadata to customize the sidebar label and position: docs/hello.md --- sidebar_label: 'Hi!' sidebar_position: 3 --- # Hello This is my **first Docusaurus document**!  It is also possible to create your sidebar explicitly in sidebars.js: sidebars.js module.exports = { tutorialSidebar: [ 'intro', 'hello', { type: 'category', label: 'Tutorial', items: ['tutorial-basics/create-a-document'], }, ], };  "},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/docs/tutorial-extras/translate-your-site","content":"","keywords":""},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/blog-docusaurus-preview/docs/tutorial-extras/translate-your-site#configure-i18n","content":"Modify docusaurus.config.js to add support for the fr locale: docusaurus.config.js module.exports = { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };  "},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/blog-docusaurus-preview/docs/tutorial-extras/translate-your-site#translate-a-doc","content":"Copy the docs/intro.md file to the i18n/fr folder: mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md  Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French. "},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/blog-docusaurus-preview/docs/tutorial-extras/translate-your-site#start-your-localized-site","content":"Start your site on the French locale: npm run start -- --locale fr  Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated. 警告 In development, you can only use one locale at a same time. "},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/blog-docusaurus-preview/docs/tutorial-extras/translate-your-site#add-a-locale-dropdown","content":"To navigate seamlessly across languages, add a locale dropdown. Modify the docusaurus.config.js file: docusaurus.config.js module.exports = { themeConfig: { navbar: { items: [ { type: 'localeDropdown', }, ], }, }, };  The locale dropdown now appears in your navbar:  "},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"/blog-docusaurus-preview/docs/tutorial-extras/translate-your-site#build-your-localized-site","content":"Build your site for a specific locale: npm run build -- --locale fr  Or build your site to include all the locales at once: npm run build  "},{"title":"Markdown Features","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/docs/tutorial-basics/markdown-features","content":"","keywords":""},{"title":"Front Matter​","type":1,"pageTitle":"Markdown Features","url":"/blog-docusaurus-preview/docs/tutorial-basics/markdown-features#front-matter","content":"Markdown documents have metadata at the top called Front Matter: my-doc.md --- id: my-doc-id title: My document title description: My document description slug: /my-custom-url --- ## Markdown heading Markdown text with [links](./hello.md)  "},{"title":"Links​","type":1,"pageTitle":"Markdown Features","url":"/blog-docusaurus-preview/docs/tutorial-basics/markdown-features#links","content":"Regular Markdown links are supported, using url paths or relative file paths. Let's see how to [Create a page](/create-a-page).  Let's see how to [Create a page](./create-a-page.md).  Result: Let's see how to Create a page. "},{"title":"Images​","type":1,"pageTitle":"Markdown Features","url":"/blog-docusaurus-preview/docs/tutorial-basics/markdown-features#images","content":"Regular Markdown images are supported. You can use absolute paths to reference images in the static directory (static/img/docusaurus.png): ![Docusaurus logo](/img/docusaurus.png)   You can reference images relative to the current file as well. This is particularly useful to colocate images close to the Markdown files using them: ![Docusaurus logo](./img/docusaurus.png)  "},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Features","url":"/blog-docusaurus-preview/docs/tutorial-basics/markdown-features#code-blocks","content":"Markdown code blocks are supported with Syntax highlighting. ```jsx title=&quot;src/components/HelloDocusaurus.js&quot; function HelloDocusaurus() { return ( &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt; ) } ```  src/components/HelloDocusaurus.js function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; }  "},{"title":"Admonitions​","type":1,"pageTitle":"Markdown Features","url":"/blog-docusaurus-preview/docs/tutorial-basics/markdown-features#admonitions","content":"Docusaurus has a special syntax to create admonitions and callouts: :::tip My tip Use this awesome feature option ::: :::danger Take care This action is dangerous :::  My tip Use this awesome feature option Take care This action is dangerous "},{"title":"MDX and React Components​","type":1,"pageTitle":"Markdown Features","url":"/blog-docusaurus-preview/docs/tutorial-basics/markdown-features#mdx-and-react-components","content":"MDX can make your documentation more interactive and allows using any React components inside Markdown: export const Highlight = ({children, color}) =&gt; ( &lt;span style={{ backgroundColor: color, borderRadius: '20px', color: '#fff', padding: '10px', cursor: 'pointer', }} onClick={() =&gt; { alert(`You clicked the color ${color} with label ${children}`) }}&gt; {children} &lt;/span&gt; ); This is &lt;Highlight color=&quot;#25c2a0&quot;&gt;Docusaurus green&lt;/Highlight&gt; ! This is &lt;Highlight color=&quot;#1877F2&quot;&gt;Facebook blue&lt;/Highlight&gt; !  This is Docusaurus green ! This is Facebook blue ! "},{"title":"初始化","type":0,"sectionRef":"#","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结","content":"","keywords":""},{"title":"环境配置​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#环境配置","content":""},{"title":"macos​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#macos","content":"安装 rails 安装数据库 $ brew update $ brew install postgresql@14 $ brew services start postgresql@14 $ brew services stop postgresql@14  安装必要驱动：pacman -S postgresql-libs "},{"title":"ubuntu(wsl)​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#ubuntuwsl","content":"安装 rvm rvm/ubuntu_rvm: Ubuntu package for RVM (github.com) 安装 postgresql PostgreSQL: Linux downloads (Ubuntu) 安装必要驱动：sudo apt-get install libpq-dev "},{"title":"数据库配置​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#数据库配置","content":""},{"title":"macos​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#macos-1","content":"# 连接postgresql，不指定用户名和数据库默认是当前登陆系统账号同名的用户与数据库 psql # 终端执行命令，其作用是创建一个与当前系统登陆用户同名的数据库，目的是为了可以通过这个数据库连接上 postgresql，不执行的话会报错数据库找不到 createdb psql -U USERNAME -W PASSWORD # 创建 gsemir 用户 CREATE USER gsemir WITH PASSWORD '123456'; # 删除默认的 postgres 数据库 DROP DATABASE postgres; # 创建属于 gsemir 用户的数据库 CREATE DATABASE gsemir OWNER gsemir; # 将所有权限赋给 gsemir 用户 GRANT ALL PRIVILEGES ON DATABASE gsemir to gsemir; # 给 postgres 用户添加 创建数据库 的属性 ALTER ROLE gsemir CREATEDB; # 之后就可以使用 gsemir 用户来创建并管理其他数据库了  "},{"title":"ubuntu(wsl)​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#ubuntuwsl-1","content":"配置同上 注意事项 项目代码用户与数据库用户需要统一本项目代码的权限是属于 gsemir 用户，而数据库配置的用户只有 postgres不能使用 gsemir 用户操作 postgres 角色（database.yml）的数据库（运行db create等）因此 gsemir 用户也要在数据库创建同名的角色及同名的数据库，添加 createdb 权限 启动服务 启动 sudo service postgresql start状态 sudo service postgresql status "},{"title":"docker​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#docker","content":"docker run -d \\ # 容器名称 --name db-for-rails-todo \\ # 环境变量 -e POSTGRES_USER=gsemir \\ -e POSTGRES_PASSWORD=123456 \\ -e POSTGRES_DB=rails-todo-dev \\ -e PGDATA=/var/lib/postgresql/data/pgdata \\ # 新增数据卷 -v rails-todo-data:/var/lib/postgresql/data \\ # 镜像名称 版本14 postgres:14 # 供复制： docker run -d --name db-for-rails-todo -e POSTGRES_USER=gsemir -e POSTGRES_PASSWORD=123456 -e POSTGRES_DB=rails-todo-dev -e PGDATA=/var/lib/postgresql/data/pgdata -v rails-todo-data:/var/lib/postgresql/data postgres:14  "},{"title":"数据库常用命令​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#数据库常用命令","content":"\\c &lt;database_name&gt; 连接数据库\\l 列出全部数据库\\dt 显示全部表格 "},{"title":"IDE​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#ide","content":"安装vscode扩展 ckolkman.vscode-postgres "},{"title":"项目初始化​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#项目初始化","content":""},{"title":"ruby 配置​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#ruby-配置","content":"安装 ruby：rvm install ruby-3.0.0 配置国内源 $ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/ $ bundle config mirror.https://rubygems.org https://gems.ruby-china.com  安装 rails：gem install rails -v 7.0.2.3 安装项目依赖：bundle 数据库配置 开发与测试数据库配置 # config/database.yaml development: &lt;&lt;: *default database: rails_todo_dev username: gsemir password: 123456 host: localhost port: 5432  "},{"title":"创建或运行项目​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#创建或运行项目","content":"同步数据库及数据表：bin/rails db:create db:migrate 创建项目 # 仅使用api模式，指定数据库，忽略测试（后面自己配），指定项目名称 rails new --api --database=postgresql --skip-test todo-backend-rails-1  启动 rails 项目 bin/rails s -p 3001 -e development bin/rails s 也行 "},{"title":"rspec 配置​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#rspec-配置","content":"将 gem 'rspec-rails', '~&gt;5.0.0' 复制到 Gemfile 中 group :development, :test do gem &quot;debug&quot;, platforms: %i[ mri mingw x64_mingw ] gem 'rspec-rails', '~&gt; 5.0.0' end  运行 bundle，安装依赖 初始化rspec：bin/rails g rspec:install 配置测试数据库 在 config/database.yml 配置测试数据库，同开发 创建数据库，同步数据表： RAILS_ENV=test bin/rails db:create db:migrate 运行单元测试： $ bundle exe rspec # 或 rspec # 执行指定的测试用例 $ rspec -e &quot;获取当前登录用户&quot; # 也可以指定行数 $ rspec spec/requests/api/v1/me_spec.rb:5``  "},{"title":"API 文档配置​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#api-文档配置","content":"Gemfile 使用本地依赖 gem 'rspec_api_documentation', path: './vendor/rspec_api_documentation'  提前解决Api文档中请求体与响应体无法正常显示的问题 请求体 # spec/spec_helper.rb require 'rspec_api_documentation' RspecApiDocumentation.configure do |config| # 配置文档中请求体的格式为json config.request_body_formatter = :json end  响应体 用修复过 bug 的依赖 # 将代码克隆到 vendor 中，别忘删除掉.git $ git clone git@github.com:GSemir0418/rspec_api_documentation.git vendor/rspec_api_documentation # 刷新依赖 $ bundle  创建 api 文档测试文件夹 mkdir spec/acceptance  API开发 "},{"title":"API 开发主要流程及命令​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#api-开发主要流程及命令","content":""},{"title":"设计 table、api​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#设计-tableapi","content":""},{"title":"创建 model​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#创建-model","content":"bin/rails g model &lt;Name&gt; field1:type field2:type "},{"title":"同步数据表​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#同步数据表","content":"bin/rails db:create db:migrate RAILS_ENV=test bin/rails db:create db:migrate 修改表结构 bin/rails g migrate AddDeletedAtToItems deleted_at:datetime 回滚命令 bin/rails db:rollback step=1 "},{"title":"创建 controller​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#创建-controller","content":"bin/rails g controller api/v1/&lt;controller_names&gt; bin/rails g controller Api::V1::&lt;Names&gt; 驼峰和下划线都可, 斜杠也可, 在Rails中，双冒号（::）用于表示命名空间的层级关系，而斜线（/）用于表示路径的层级关系。Rails会将斜线转换为双冒号，并根据命名空间的层级关系创建相应的文件和目录结构。因此，在这两条指令中，最终生成的文件和动作都是相同的。 "},{"title":"TDD​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#tdd","content":"初始化 bin/rails g rspec:install 创建测试文件 bin/rails g rspec:request &lt;controller_names&gt; 创建接口测试文档文件 touch /spec/acceptance/&lt;controller_names&gt;_spec.rb "},{"title":"接口文档生成​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#接口文档生成","content":"bin/rake docs:generate "},{"title":"设计 Table​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#设计-table","content":"t.string 和 t.text 区别 数据类型： t.string 创建的列会使用数据库中的字符串类型（如 VARCHAR），而 t.text 创建的列会使用数据库中的文本类型（如 TEXT）。 存储空间： 字符串类型 (t.string) 通常用于存储相对较短的文本，例如标题、姓名等，有一个固定的最大长度。而文本类型 (t.text) 通常用于存储更长的文本，如文章内容、评论等，没有固定的最大长度限制。 索引： 由于字符串类型有固定的最大长度，因此可以创建索引以提高搜索和排序的性能。文本类型没有固定的最大长度，所以不能创建普通索引，但可以创建全文索引（Full-Text Index）来支持全文搜索。 "},{"title":"Model​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#model","content":"执行生成命令后，rails 会帮我们创建数据模型文件及数据库schema文件； 模型类默认是单数形式的 ActiveRecord 是 Rails 中的默认 ORM 工具，用于简化与数据库的交互。 模型类通常继承 ApplicationRecord ?? ActiveRecord::Base，以实现与数据库的交互 提供验证方法 validate 支持常规校验与自定义校验，自定义校验除非在self.errors中add error，否则默认返回 nil，表示通过校验 数据范围 default_scope 声明与其他模型之间的关系 belongs_to 定义该数据模型实例的方法，例如User的generate_jwt 支持生命周期函数，例如before_create，after_create，用于数据模型实例在被创建前后执行的逻辑 总结：将数据的校验逻辑及模型相关的工具逻辑抽离到model类中 数据的校验逻辑会在执行 save/create/update 等方法时进行校验 工具逻辑（例如生成 jwt、生成验证码、发送邮件）的执行可以利用 ActiveRecord 提供的生命周期回调（before_create/after_save/before_update 等），决定工具函数的执行时机 而 controller 层仅用于操作数据库，根据不同情况返回不同响应 "},{"title":"Migration​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#migration","content":"生成 model 会生成 migration 文件 执行同步命令后，rails 会主动读取数据库信息，将数据库表结构存入 schema 文件中，因此手动更改这个文件是无效的 数据库表结构只能通过执行一次新的 migration 来修改 "},{"title":"Controller​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#controller","content":"执行生成命令后，rails会帮我们创建控制器文件及对应路由 专注于请求/响应逻辑，与数据库交互的逻辑等 "},{"title":"路由​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#路由","content":"resource 定义了一个 RESTful 资源，表示该资源具有多个默认的 CRUD（创建、读取、更新、删除）操作。 控制器文件默认都是复数形式的，与我们在路由文件中定义的 resource 的单复数形式无关 关于路由用 resource 还是 resources： resource用于当您只有一个模型对象（单数资源）时，例如/profile表示当前登录用户的个人资料。使用resource时，不会创建index路由，而且没有一个路由需要在URL中传递ID参数。resources用于当您有多个模型对象（复数资源）时，例如/posts表示所有的文章。使用resources时，会创建index, show, new, edit, create, update, destroy等常用的路由，每个路由都需要在URL中传递ID参数来指定具体的对象。 在 RESTful 设计中，资源的路由通常使用复数形式，rails 也会自动将路由映射为复数形式 路由可以通过定义资源的形式来表示，例如 resources :items, only: [:create, :index, :destroy] 手动指定路由与控制器方法的映射关系： post :validation_code, to: 'validation_code#create' only 数组中定义了该资源接收的请求方法，其余请求方法均会返回 404 这些请求方法分别对应 controller 中的方法 其中 index 与 show 方法非常相似，但 index 用于显示资源的集合（列表），可以显示多个资源；而 show 用于显示单个资源的详细信息，主要用于显示单个资源。 这些方法通常与路由一起使用，以便在浏览器中使用相应的 URL 访问它们。例如，index方法可以与 GET /posts 或 /posts?page=1 路由关联，而show方法可以与 GET /posts/:id 路由关联 "},{"title":"CRUD Api​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#crud-api","content":"在编写 controller 逻辑时，通常需要借助 model 类对数据库进行增删改查的操作。下面列举一些常见 api new 创建一个数据实例 save 将实例保存至数据库 create 相当于 new + save find 使用主键查询 find_by 使用传入的值作为查询条件，返回第一个满足条件的数据 update 一般使用find查数据，该数据，再save，相当于update "},{"title":"响应​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#响应","content":"rails 提供了 render、head、redirect_to等关键字指定响应体内容或重定向操作 render 关键字可以指定要渲染的视图模板、设置响应头、指定响应格式等 render json: {}：将指定的 JSON 对象作为响应的主体。render plain: 'text'：将指定的纯文本作为响应的主体。render file: 'path/to/file'：将指定的文件内容作为响应的主体。render template: 'path/to/template'：渲染指定的视图模板并作为响应的主体。render action: :new：渲染指定动作对应的视图模板并作为响应的主体。 head 方法则更适用于简单的状态码响应，不需要具体响应主体内容的情况。 "},{"title":"TDD​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#tdd-1","content":"TDD 测试驱动开发是一种开发策略，即先写单元测试，再以通过测试的目的来写 controller 层逻辑。测试完成后，接口功能基本也实现了 测试分成单元测试和文档测试，单元测试用来测试接口失败的情况，而文档测试用来测试接口成功的情况，成功后会自动生成接口文档 配置rspec，统一文档测试时的请求头 # spec/spec_helper.rb ... Rspec.configure do |config| config.before(:each) do |spec| # 如果是acceptance类型的测试 if spec.metadata[:type].equal? :acceptance header 'Accept', 'application/json' header 'Content-Type', 'application/json' end end ...  生成文档命令：bin/rake docs:generate bin/rake 与 bin/rails 的区别： bin/rake 用于执行 Rake 任务，比如数据库迁移、测试运行、api文档生成等 bin/rails 提供了更高级的命令，比如服务器运行、应用程序生成等 接口文档页面在 doc/api 文件夹下，使用 npx http-server doc/api 来查看 其他 "},{"title":"密钥管理​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#密钥管理","content":"生成或编辑 keys bin/rails credentials:editor 指定 vscode 编辑 EDITOR=&quot;code --wait&quot; bin/rails credentials:edit读取 keys bin/rails c | Rails.application.credentials.secret_key_base 或者 Rails.application.credentials.config生产环境 keys EDITOR=&quot;code --wait&quot; rails credentials:edit --environment production需要自定义 secret_key_base读取生产环境 keys RAILS_ENV=production bin/rails c | Rails.application.credentials.secret_key_base 或者 Rails.application.credentials.config生产环境数据库配置剧透：对于本项目来说，只会管理 jwt 密钥、邮箱服务器授权码及数据库密码查看密钥：bin/rails c | Rails.application.credentials.config "},{"title":"中间件​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#中间件","content":"写中间件 bin/rails middleware 显示全部中间件 touch lib/auto_jwt.rb 在lib下创建中间件文件（lib是自己给自己写的库，vendor是别人给自己写的库） 全局配置中间件 # config/application.rb ... require_relative &quot;../lib/auto_jwt&quot; Bundler.require(*Rails.groups) module RailsTodo1 class Application &lt; Rails::Application ... config.middleware.use AutoJwt end end  改写 mes controller "},{"title":"配置邮件服务器​","type":1,"pageTitle":"初始化","url":"/blog-docusaurus-preview/docs/Ruby/Rails项目总结#配置邮件服务器","content":"创建 mailer bin/rails generate mailer User create app/mailers/user_mailer.rb invoke erb create app/views/user_mailer invoke rspec create spec/mailers/user_spec.rb create spec/mailers/previews/user_preview.rb  Mailer 全局配置 # app/mailers/application_mailer.rb class ApplicationMailer &lt; ActionMailer::Base # 全局发送邮件地址 default from: &quot;845217811@qq.com&quot; # html默认布局 layout 'mailer' end  邮件配置 # app/mailers/user_mailer.rb class UserMailer &lt; ApplicationMailer def welcome_email(code) # 给模板传递变量 @code = code mail(to: &quot;845217811@qq.com&quot;, subject: 'Welcome to My Awesome Site') end end  修改邮件内容 &lt;!-- app/views/user_mailer/welcome_email.html.erb --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta content=&quot;text/html; charset=UTF-8&quot; http-equiv=&quot;Content-Type&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;%# 使用传递的变量 %&gt; hi &lt;%= @code %&gt; &lt;/body&gt; &lt;/html&gt;  开启 qq 邮箱的 smtp 服务：登录 qq 邮箱，点击「设置」=&gt;「账户」=&gt;「开启 IMAP/SMTP 服务」=&gt;「短信验证」保存授权码：EDITOR=&quot;code --wait&quot; bin/rails credentials:edit写入 email_pw: ycmbmysnijqcbfgb配置邮件服务：记得生产环境也要配置 # config/environments/development.rb ... # 是否抛出邮件错误 config.action_mailer.raise_delivery_errors = true # 是否使用缓存 config.action_mailer.perform_caching = false # config.action_mailer.smtp_settings = { address: 'smtp.qq.com', port: 587, domain: 'smtp.qq.com', user_name: '845217811@qq.com', password: Rails.application.credentials.email_pw, authentication: 'plain', anable_starttls_auto: true, open_timeout: 10, read_timeout: 10 } ...  控制台测试邮件发送功能bin/rails console # 使用UserMailer内置方法即可 UserMailer.welcome_email('123456').deliver  记得生产环境也需要配置授权码 部署 "}]